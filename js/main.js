// Generated by CoffeeScript 1.12.2
(function() {
  'use strict';
  var $document, $window, _bpush, _cse, _prevScrollTop, _prevScrollUp, doNotAffixHeight, element, gcse_cx, i, isDebug, isSP, isSupportPushNotification, len, ref, ref1, scrollStopEvent, searchButton, throttle;

  $window = window;

  $document = $window.document;

  isDebug = $window.location.hostname === 'localhost' || (typeof PRODUCTION === "undefined" || PRODUCTION === null);

  isSupportPushNotification = 'undefined' !== typeof Promise && 'undefined' !== typeof Notification && 'serviceWorker' in navigator ? !0 : !1;

  isSP = !$window.matchMedia("(min-width: 768px)").matches;

  window._loadScript = (function(d, src, reload) {
    var e, id, loaded;
    id = src;
    loaded = d.getElementById(id);
    if (loaded !== null) {
      if (!reload) {
        return;
      }
      loaded.parentNode.removeChild(loaded);
    }
    e = d.createElement('script');
    e.id = id;
    e.src = src;
    e.async = true;
    (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(e);
  }).bind(null, $document);

  _bpush = $window._bpush || function() {
    return _loadScript('/bpush_loader.js', true);
  };

  element = $document.getElementById('bpush');

  if (element != null) {
    element.addEventListener('click', _bpush, false);
    if (!isSupportPushNotification) {
      element.classList.add('hidden');
    }
  }

  $window.addEventListener('load', function() {
    var outputElement, ref;
    outputElement = $document.getElementById('output');
    if ((ref = navigator.serviceWorker) != null) {
      ref.register('/service-worker.js', {
        scope: './'
      }).then(function(r) {})["catch"](function(whut) {
        console.error(whut);
      });
    }
    $window.addEventListener('beforeinstallprompt', function(e) {
      outputElement.textContent = 'beforeinstallprompt Event fired';
    });
  });

  ref = $document.querySelectorAll(isSP ? '.visible-xs-block' : '.hidden-xs' + ' .adsbygoogle');
  for (i = 0, len = ref.length; i < len; i++) {
    element = ref[i];
    element.parentNode.removeChild(element);
  }

  if ((ref1 = $document.getElementById('this-year')) != null) {
    ref1.textContent = new Date().getFullYear();
  }

  element = $document.getElementById('gcse-search');

  if (element != null) {
    gcse_cx = element.dataset.gcse_cx;
    element.parentNode.replaceChild($document.createElement('gcse:search'), element);
    setTimeout(function() {
      _loadScript("//cse.google.com/cse.js?cx=" + gcse_cx);
    }, 6000);
    _cse = $window._cse || function() {
      var gsc;
      cse.q.blur();
      gsc = $document.getElementById('gsc-i-id1');
      if (gsc === null) {
        return true;
      }
      gsc.value = cse.q.value;
      $document.querySelector('input.gsc-search-button').click();
      cse.reset();
      return false;
    };
    searchButton = $document.getElementById('search-button');
    if (searchButton != null) {
      searchButton.addEventListener('click', function(event) {
        return _cse();
      });
    }
  }

  doNotAffixHeight = 800;

  _prevScrollTop = $document.body.scrollTop;

  _prevScrollUp = false;

  scrollStopEvent = function(_event) {
    var currentScrollTop, isScrollUp, navbarBottom, navbarBottomClassList, navbarTop, navbarTopClassList, prevScrollTop, prevScrollUp;
    prevScrollTop = _prevScrollTop;
    prevScrollUp = _prevScrollUp;
    currentScrollTop = $document.body.scrollTop;
    if (prevScrollTop === currentScrollTop) {
      return;
    }
    isScrollUp = prevScrollTop > currentScrollTop;
    _prevScrollTop = currentScrollTop;
    _prevScrollUp = isScrollUp;
    if (isScrollUp) {
      if (prevScrollUp !== isScrollUp) {
        return;
      }
      if (prevScrollTop - currentScrollTop < 30) {
        return;
      }
    } else if (currentScrollTop < doNotAffixHeight) {
      return;
    }
    navbarTop = $document.getElementById('navbar-top');
    navbarBottom = $document.getElementById('navbar-bottom');
    navbarTopClassList = navbarTop.classList;
    navbarBottomClassList = navbarBottom.classList;
    if (currentScrollTop < doNotAffixHeight) {
      if (navbarTopClassList.contains('affix')) {
        navbarTopClassList.remove('affix');
      }
      if (navbarTopClassList.contains('affixed')) {
        navbarTopClassList.remove('affixed');
      }
      if (navbarBottomClassList.contains('affixed')) {
        navbarBottomClassList.remove('affixed');
      }
    } else if (isScrollUp) {
      if (!navbarTopClassList.contains('affix')) {
        navbarTopClassList.add('affix');
        setTimeout(function() {
          if (!navbarTopClassList.contains('affixed')) {
            navbarTopClassList.add('affixed');
          }
        }, 30);
      } else {
        if (!navbarTopClassList.contains('affixed')) {
          navbarTopClassList.add('affixed');
        }
      }
      if (!navbarBottomClassList.contains('affixed')) {
        navbarBottomClassList.add('affixed');
      }
    } else {
      if (navbarTopClassList.contains('affixed')) {
        navbarTopClassList.remove('affixed');
      }
      if (navbarBottomClassList.contains('affixed')) {
        navbarBottomClassList.remove('affixed');
      }
    }
  };


  /**
   * throttle
   * @param fn
   * @param delay
   * @returns {Function}
   * @private
   * @description forked from underscore.js
   */

  throttle = function(fn, delay) {
    var args, context, previous, result, timeout;
    context = void 0;
    args = void 0;
    result = void 0;
    timeout = null;
    previous = 0;
    return function() {
      var now, remaining;
      now = Date.now();
      if (!previous) {
        previous = now;
      }
      remaining = delay - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = fn.apply(context, args);
        context = args = null;
      }
      return result;
    };
  };

  $window.addEventListener('scroll', throttle(scrollStopEvent, 250), false);

}).call(this);
